basePath: /
definitions:
  models.Book:
    description: Book object with all details
    properties:
      author:
        example: Alan Donovan
        type: string
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      id:
        example: 1
        type: integer
      isbn:
        example: 978-0134190440
        type: string
      published_at:
        example: "2015-10-26T00:00:00Z"
        type: string
      title:
        example: The Go Programming Language
        type: string
      updated_at:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  models.CreateBookRequest:
    description: Request body for creating a new book
    properties:
      author:
        example: Robert C. Martin
        type: string
      isbn:
        example: 978-0132350884
        type: string
      published_at:
        description: 'Format: "2006-01-02"'
        example: "2008-08-01"
        type: string
      title:
        example: Clean Code
        type: string
    type: object
  models.LoginRequest:
    description: Login credentials
    properties:
      password:
        example: admin123
        type: string
      username:
        example: admin
        type: string
    type: object
  models.LoginResponse:
    description: Login response with access token
    properties:
      message:
        example: Login successful
        type: string
      token:
        example: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        type: string
    type: object
  models.MessageResponse:
    description: Success message response
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  models.UpdateBookRequest:
    description: Request body for updating a book (all fields optional)
    properties:
      author:
        example: Robert C. Martin
        type: string
      isbn:
        example: 978-0132350884
        type: string
      published_at:
        description: 'Format: "2006-01-02"'
        example: "2008-08-01"
        type: string
      title:
        example: 'Clean Code: A Handbook of Agile Software Craftsmanship'
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@bookapi.com
    name: API Support
  description: A RESTful API for managing books with authentication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Book API
  version: "1.0"
paths:
  /api/books:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all books in the collection
      produces:
      - application/json
      responses:
        "200":
          description: List of books
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Add a new book to the collection
      parameters:
      - description: Book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - Books
  /api/books/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the collection
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Retrieve a specific book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Book details
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - BearerAuth: []
      summary: Get book by ID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update an existing book's details (partial update supported)
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated successfully
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - Books
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
      summary: User login
      tags:
      - Authentication
  /api/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user session token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.MessageResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /health:
    get:
      consumes:
      - application/json
      description: Check API and database health status
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: Service is unhealthy
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - Health
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
